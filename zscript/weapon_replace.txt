
Class WeaponReplacer : EventHandler
{
	override void PlayerEntered (PlayerEvent e)
	{
	}
	
	override void WorldTick()
	{
		let player = Players[ConsolePlayer].mo;
		if(!player) return;
		
		if(!Player.FIndInventory("UnrealFist")) Player.SetInventory("UnrealFist", 1);
		if(!Player.FIndInventory("UnrealWeapon1")) Player.SetInventory("UnrealWeapon1", 1);
		if(!Player.FIndInventory("UnrealWeapon2")) Player.SetInventory("UnrealWeapon2", 1);
		if(!Player.FIndInventory("UnrealWeapon3")) Player.SetInventory("UnrealWeapon3", 1);
		if(!Player.FIndInventory("UnrealWeapon4")) Player.SetInventory("UnrealWeapon4", 1);
		if(!Player.FIndInventory("UnrealWeapon5")) Player.SetInventory("UnrealWeapon5", 1);
		if(!Player.FIndInventory("UnrealWeapon6")) Player.SetInventory("UnrealWeapon6", 1);
		
		//check every 10 tics
		if(player.GetAge() % 10)
		{
			Weapon weap = Players[ConsolePlayer].ReadyWeapon;
			if(weap is "UnrealWeapon1" || weap is "UnrealWeapon2" || weap is "UnrealWeapon3" || weap is "UnrealWeapon4" || weap is "UnrealWeapon5" || weap is "UnrealWeapon6")
				player.A_SelectWeapon("UnrealFist");
			
			//Remove NashMove. not good for VR
			if(player.FindInventory("Z_NashMove")) player.SetInventory("Z_NashMove", 0);
		}
		
	}
}

Class HapticHelper : EventHandler
{
	static void BuzzHand(int hand = 0)
	{
		Let player = Players[ConsolePlayer].mo;
		if(!player) return;
		
		player.LineAttack(0, 0, 0, 1, "melee", "uhapticDummy", LAF_NOIMPACTDECAL | LAF_NOINTERACT | LAF_NORANDOMPUFFZ | (hand ? LAF_ISOFFHAND : 0));
	}
	
	static void Buzz()
	{
		HapticHelper.BuzzHand();
		HapticHelper.BuzzHand(1);
	}
	
	static void BuzzOffhand()
	{
		HapticHelper.BuzzHand(1);
	}
	
	static void BuzzWeapon(Weapon weap)
	{
		if(!weap || !weap.owner) return;
		
		int hand = weap.bOffhandWeapon ? 1 : 0;
		HapticHelper.BuzzHand(hand);
	}
}


Class UnrealFist : Fist replaces Fist
{
	Default
	{
	Weapon.SlotNumber 1;
	Tag "Fist";
	}
	
	States
	{
	Ready:
		FIST A 1 A_WeaponReady;
		Loop;
	Deselect:
		FIST A 1 A_Lower(100);
		Loop;
	Select:
		FIST A 1 A_Raise(100);
		Loop;
	Fire:
		FIST BCDEF 1;
		FIST F 0 A_Punch;
		FIST EDCB 1;
		FIST A 8;
		FIST A 5 A_ReFire;
		Goto Ready;
	}
}

Class UnrealWeapon1 : UnrealFist replaces ChainSaw
{
	Default
	{
	Weapon.SlotNumber 1;
	Tag "Weapon Slot 1";
	}
	
	States
	{
	Ready:
		TNT1 A 1 ACS_NamedExecute("SetWeapon1", 0);
		TNT1 A 1 A_WeaponReady;
		wait;
	Select:
		TNT1 A 1 A_Raise(120);
		wait;
	DeSelect:
		TNT1 A 1 A_Lower(120);
		wait;
	Spawn:
		SLT1 A -1;
		Stop;
	}
}

Class UnrealWeapon2 : UnrealFist replaces Pistol
{
	Default
	{
	Weapon.SlotNumber 2;
	Tag "Weapon Slot 2";
	Inventory.AltHUDIcon "SLOT2";
	}
	
	States
	{
	Ready:
		TNT1 A 1 ACS_NamedExecute("SetWeapon2", 0);
		TNT1 A 1 A_WeaponReady;
		wait;
	Select:
		TNT1 A 1 A_Raise(120);
		wait;
	DeSelect:
		TNT1 A 1 A_Lower(120);
		wait;
	Spawn:
		SLT2 A -1;
		Stop;
	}
}

Class UnrealWeapon3 : UnrealFist replaces Shotgun
{
	Default
	{
	Weapon.SlotNumber 3;
	Tag "Weapon Slot 3";
	Inventory.AltHUDIcon "SLOT3";
	}
	
	States
	{
	Ready:
		TNT1 A 1 ACS_NamedExecute("SetWeapon3", 0);
		TNT1 A 1 A_WeaponReady;
		wait;
	Select:
		TNT1 A 1 A_Raise(120);
		wait;
	DeSelect:
		TNT1 A 1 A_Lower(120);
		wait;
	Spawn:
		SLT3 A -1;
		Stop;
	}
}

Class UnrealWeapon4 : UnrealFist replaces Chaingun
{
	Default
	{
	Weapon.SlotNumber 4;
	Tag "Weapon Slot 4";
	Inventory.AltHUDIcon "SLOT4";
	}
	
	States
	{
	Ready:
		TNT1 A 1 ACS_NamedExecute("SetWeapon4", 0);
		TNT1 A 1 A_WeaponReady;
		wait;
	Select:
		TNT1 A 1 A_Raise(120);
		wait;
	DeSelect:
		TNT1 A 1 A_Lower(120);
		wait;
	Spawn:
		SLT4 A -1;
		Stop;
	}
}

Class UnrealWeapon5 : UnrealFist replaces RocketLauncher
{
	Default
	{
	Weapon.SlotNumber 5;
	Tag "Weapon Slot 5";
	Inventory.AltHUDIcon "SLOT5";
	}
	
	States
	{
	Ready:
		TNT1 A 1 ACS_NamedExecute("SetWeapon5", 0);
		TNT1 A 1 A_WeaponReady;
		wait;
	Select:
		TNT1 A 1 A_Raise(120);
		wait;
	DeSelect:
		TNT1 A 1 A_Lower(120);
		wait;
	Spawn:
		SLT5 A -1;
		Stop;
	}
}

Class UnrealWeapon6 : UnrealFist replaces PlasmaRifle
{
	Default
	{
	Weapon.SlotNumber 6;
	Tag "Weapon Slot 6";
	Inventory.AltHUDIcon "SLOT6";
	}
	
	States
	{
	Ready:
		TNT1 A 1 ACS_NamedExecute("SetWeapon6", 0);
		TNT1 A 1 A_WeaponReady;
		wait;
	Select:
		TNT1 A 1 A_Raise(120);
		wait;
	DeSelect:
		TNT1 A 1 A_Lower(120);
		wait;
	Spawn:
		SLT6 A -1;
		Stop;
	}
}

Class WeaponDummy1 : Actor replaces SuperShotgun {}
Class WeaponDummy2 : Actor replaces BFG9000 {}

Class DoomweaponZ : Doomweapon
{
	action void A_HapticBuzz(int buzzHand = 0)
	{
		if(buzzHand < 0) //auto hand detect
		{
			HapticHelper.BuzzWeapon(invoker);
		}
		else if(buzzHand == 0) //both hands
		{
			HapticHelper.Buzz();
		}
		else if(buzzHand == 1) //main hand
		{
			HapticHelper.BuzzHand();
		}
		else if(buzzHand == 2) //off-hand
		{
			HapticHelper.BuzzOffhand();
		}
	}
}

Class WeaponAutoMagZ : DoomweaponZ
{
	override void tick()
	{
		if(!owner || !owner.player || owner.player.health <= 0) return;
		
		bool hand = owner.player.ReadyWeapon == self;
		if(!hand && !owner.player.OffhandWeapon) return;
		
		double roll = abs(hand ? owner.player.mo.AttackRoll : owner.player.mo.OffhandRoll);
		
		//Detect if tilted
		if(roll > 60)
			owner.player.mo.SetInventory("AutoMagTilted", 1, false);
		else
			owner.player.mo.SetInventory("AutoMagTilted", 0, false);
		
		Super.Tick();
	}
}

Class AutoMagTilted : Inventory
{
	Default
	{
	inventory.maxamount 1;
	}
}

class urpgDummyPuff : Actor
{

  Default
  {
    Mass        0;
    Radius      1;
    Height      2;
    RenderStyle "None";
    +NOBLOCKMAP;
    +NOGRAVITY;
    +BLOODLESSIMPACT;
    +PUFFONACTORS;
    +DONTSPLASH;
    +NOTRIGGER;
    +FORCEXYBILLBOARD;
    +NOTONAUTOMAP;
  }

  States
  {
    Spawn:
      TNT1 A 1;
      Stop;
  }

}

class uhapticDummy : urpgDummyPuff
{
  Default
  {
	DamageType "Melee";
	Damage 1;
  }
}